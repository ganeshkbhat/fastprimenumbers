function primesSum(){let e,t;if(primesRange)e=primesRange();else throw console.log("Primes Range API files missing"),Error("Primes Range API files missing");if(primesCount)t=primesCount();else throw console.log("Primes Count API files missing"),Error("Primes Count API files missing");async function r(e,r,n="sqroot"){await t.alternateWaysOptimized(e,r,n).primes.reduce((e,t)=>e+t,0)}async function n(t,r,n="sqroot"){return await e.alternateWaysOptimized(t,r,n).primes.reduce((e,t)=>e+t,0)}async function a(e,r){return await t.alternateWaysOptimized(e,r).primes.reduce((e,t)=>e+t,0)}async function i(t,r){return await e.alternateWaysOptimized(t,r).primes.reduce((e,t)=>e+t,0)}return{alternateWaysCount:function e(r,n,a="sqroot"){return t.alternateWays(r,n,a).primes.reduce((e,t)=>e+t,0)},alternateWaysCountOptimized:r,alternateWaysRange:function t(r,n,a="sqroot"){return e.alternateWays(r,n,a).primes.reduce((e,t)=>e+t,0)},alternateWaysRangeOptimized:n,fastCount:function e(r,n){return t.alternateWays(r,n).primes.reduce((e,t)=>e+t,0)},fastCountOptimized:a,fastRange:function t(r,n){return e.alternateWays(r,n).primes.reduce((e,t)=>e+t,0)},fastRangeOptimized:i}}