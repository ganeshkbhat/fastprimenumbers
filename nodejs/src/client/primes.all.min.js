/**
 * Ganesh Bhat
 * https://github.com/ganeshkbhat/fastprimecalculations
 * Fastest method of Prime Number Calculations
 * Functions and Alternate ways for calculation of Prime Numbers
 * 
 * ** prime(n) ** is the Recommended Way for calculation checks of prime numbers
 * 
*/

function primes(){function t(t){let e=0;if(2===t||3===t||5===t||7===t)return!0;if(1===t||t>7&&(t%5==0||t%7==0||t%2==0||t%3==0))return!1;if(Number.isInteger((t-1)/6)||Number.isInteger((t+1)/6)){for(let r=1;r<t;r++){e+=1;let i=6*r,n=t/(5+i),s=t/(7+i);if(n>1&&Number.isInteger(n)||s>1&&Number.isInteger(s))return!1;if(i>t)break}return!0}return!1}let e=t=>{for(let e=2,r=Math.sqrt(t);e<=r;e++)if(t%e==0)return!1;return t>1};return{fast:t,prime:t,recursive:function t(e){let r=0;if(e<=1)return!1;for(let i=2;i<e;i++)if(r+=1,e%i==0)return!1;return!0},sqrootExpressive:function t(e){let r=0;if(e<2)return!1;for(let i=2,n=Math.sqrt(e);i<=n;i++)if(r+=1,e%i==0)return!1;return!0},sqroot:e}}function primesCount(){let t;if(primes)t=primes;else throw console.log("Primes API files missing"),Error("Primes API files missing");var{recursive:e,sqrootExpressive:r,sqroot:i,prime:n}=t();function s(t,s,a="sqroot"){let $=[],o=0,u=t;if(!a)throw Error("[fast-prime]: range.js: AlternateWays: Invalid Option: ",a);for(;o!=s;){if(2===u||3===u||5===u||7===u){$.push(u),u++;continue}if(1===u||u>7&&(u%5==0||u%7==0||u%2==0||u%3==0)){u++;continue}"recursive"===a||"conventional"===a?e(u)&&($.push(u),o++):"sqrootExpressive"===a?r(u)&&($.push(u),o++):"sqroot"===a?i(u)&&($.push(u),o++):"primes"===a&&n(u)&&($.push(u),o++),u++}if(o!==s&&$.length!==s)throw Error("[fast-prime]: count.js: alternateWaysOptimized: Prime numbers checks issue with the provided function: ");return{count:$.length,primes:$}}async function a(t,e,r="sqroot"){let i=[],n=0;try{if(t<1e4&&(i=await JSON.parse(i=await fetch("https://unpkg.com/fast-prime@0.0.64/src/client/10000.json")).data),t<1e5&&(i=await JSON.parse(i=await fetch("https://unpkg.com/fast-prime@0.0.64/src/client/100000.json")).data),t<1e6&&(i=await JSON.parse(i=await fetch("https://unpkg.com/fast-prime@0.0.64/src/client/1000000.json")).data),!(t>1e6)&&i.length){if(i=i.filter(r=>{if(r>=t&&n<e)return i.push(r),n++,r}),n!==e&&i.length!==e)throw Error("[fast-prime]: count.js: alternateWaysOptimized: Prime numbers checks issue with the provided function: ");return await {count:n,primes:i}}}catch(a){console.log("[fast-prime]: count.js: There was an error trying to fetch ",a.toString())}return s(t,e,r)}function $(t,e){let r=[],i=0,s=t;for(;i!=e;){if(2===s||3===s||5===s||7===s){r.push(s),i++,s++;continue}if(1===s||s>7&&(s%5==0||s%7==0||s%2==0||s%3==0)){s++;continue}(Number.isInteger((s-1)/6)||Number.isInteger((s+1)/6))&&n(s)&&(r.push(s),i++),s++}if(i!==e&&r.length!==e)throw Error("[fast-prime]: count.js: fastOptimized: Prime numbers checks issue with the provided function: ");return{count:i,primes:r}}async function o(t,e){let r=[],i=0;try{if(t<1e4&&(r=await JSON.parse(r=await fetch("https://unpkg.com/fast-prime@0.0.64/src/client/10000.json")).data),t<1e5&&(r=await JSON.parse(r=await fetch("https://unpkg.com/fast-prime@0.0.64/src/client/100000.json")).data),t<1e6&&(r=await JSON.parse(r=await fetch("https://unpkg.com/fast-prime@0.0.64/src/client/1000000.json")).data),!(t>1e6)&&r.length){if(r=r.filter(n=>{if(n>=t&&i<e)return r.push(n),i++,n}),i!==e&&r.length!==e)throw Error("[fast-prime]: count.js: fastOptimized: Prime numbers checks issue with the provided function: ");return{count:i,primes:r}}}catch(n){console.log("[fast-prime]: count.js: There was an error trying to fetch ",n.toString())}return $(t,e)}return{alternateWays:s,alternateWaysOptimized:a,fast:$,fastOptimized:o}}function primesRange(){let t;if(primes)t=primes;else throw console.log("Primes API files missing"),Error("Primes API files missing");let{recursive:e,sqrootExpressive:r,sqroot:i,prime:n}=t();function s(t,s,a="sqroot"){let $=[];for(let o=t;o<=s;o++){if(2===o||3===o||5===o||7===o){$.push(o);continue}if(1!==o&&(!(o>7)||o%5!=0&&o%7!=0&&o%2!=0&&o%3!=0)){if("recursive"===a||"conventional"===a)e(o)&&$.push(o);else if("sqrootExpressive"===a)r(o)&&$.push(o);else if("sqroot"===a)i(o)&&$.push(o);else if("primes"===a)n(o)&&$.push(o);else throw Error("[fast-prime]: range.js: AlternateWays: Invalid Option: ",a)}}return{count:$.length,primes:$}}async function a(t,e,r="sqroot"){let i=[];if(t>e)throw Error("Start cannot be greater than end. Start: ",t,", end: ",e);try{if(t<1e4&&(i=await JSON.parse(i=await fetch("https://unpkg.com/fast-prime@0.0.64/src/client/10000.json"))),t<1e5&&(i=await JSON.parse(i=await fetch("https://unpkg.com/fast-prime@0.0.64/src/client/100000.json"))),t<1e6&&(i=await JSON.parse(i=await fetch("https://unpkg.com/fast-prime@0.0.64/src/client/1000000.json"))),!(e>1e6)&&i.length)return{count:(i=i.filter(r=>r>t&&r<e)).length,primes:i}}catch(n){console.log("[fast-prime]: range.js: alternateWaysOptimized: There was an error trying to fetch ",n.toString())}return s(t,e,r)}function $(t,e){let r=[],i=0;for(let s=t;s<=e;s++){if(2===s||3===s||5===s||7===s){i+=1,r.push(s);continue}1!==s&&(!(s>7)||s%5!=0&&s%7!=0&&s%2!=0&&s%3!=0)&&(Number.isInteger((s-1)/6)||Number.isInteger((s+1)/6))&&n(s)&&(i+=1,r.push(s))}return{count:r.length,primes:r}}async function o(t,e){let r=[];if(t>e)throw Error("Start cannot be greater than end. Start: ",t,", end: ",e);try{if(t<1e4&&(r=await JSON.parse(r=await fetch("https://unpkg.com/fast-prime@0.0.64/src/client/10000.json"))),t<1e5&&(r=await JSON.parse(r=await fetch("https://unpkg.com/fast-prime@0.0.64/src/client/100000.json"))),t<1e6&&(r=await JSON.parse(r=await fetch("https://unpkg.com/fast-prime@0.0.64/src/client/1000000.json"))),!(e>1e6)&&r.length)return{count:(r=r.filter(r=>r>t&&r<e)).length,primes:r}}catch(i){console.log("[fast-prime]: range.js: fastOptimized: There was an error trying to fetch ",i.toString())}return $(t,e)}return{alternateWays:s,alternateWaysOptimized:a,fast:$,fastOptimized:o}}function primesSum(){let t,e;if(primesRange)t=primesRange();else throw console.log("Primes Range API files missing"),Error("Primes Range API files missing");if(primesCount)e=primesCount();else throw console.log("Primes Count API files missing"),Error("Primes Count API files missing");async function r(t,r,i="sqroot"){await e.alternateWaysOptimized(t,r,i).primes.reduce((t,e)=>t+e,0)}async function i(e,r,i="sqroot"){return await t.alternateWaysOptimized(e,r,i).primes.reduce((t,e)=>t+e,0)}async function n(t,r){return await e.alternateWaysOptimized(t,r).primes.reduce((t,e)=>t+e,0)}async function s(e,r){return await t.alternateWaysOptimized(e,r).primes.reduce((t,e)=>t+e,0)}return{alternateWaysCount:function t(r,i,n="sqroot"){return e.alternateWays(r,i,n).primes.reduce((t,e)=>t+e,0)},alternateWaysCountOptimized:r,alternateWaysRange:function e(r,i,n="sqroot"){return t.alternateWays(r,i,n).primes.reduce((t,e)=>t+e,0)},alternateWaysRangeOptimized:i,fastCount:function t(r,i){return e.alternateWays(r,i).primes.reduce((t,e)=>t+e,0)},fastCountOptimized:n,fastRange:function e(r,i){return t.alternateWays(r,i).primes.reduce((t,e)=>t+e,0)},fastRangeOptimized:s}}function primesFactorial(){let t,e;if(primesRange)t=primesRange();else throw console.log("Primes Range API files missing"),Error("Primes Range API files missing");if(primesCount)e=primesCount();else throw console.log("Primes Count API files missing"),Error("Primes Count API files missing");function r(t){t=BigInt(t);let e=BigInt(1);if(t<0||0===t)return!1;for(let r=BigInt(1);r<=t;r++)e*=r;return e}async function i(t,i,n="sqroot"){return await e.alternateWaysOptimized(t,i,n).primes.map(r)}async function n(e,i,n="sqroot"){return await t.alternateWaysOptimized(e,i,n).primes.map(r)}async function s(t,i){return await e.fastOptimized(t,i).primes.map(r)}async function a(e,i){return await t.fastOptimized(e,i).primes.map(r)}function $(){}function o(){}return{factorial:r,alternateWaysCount:function t(i,n,s="sqroot"){return e.alternateWays(i,n,s).primes.map(r)},alternateWaysCountOptimized:i,alternateWaysRange:function e(i,n,s="sqroot"){return t.alternateWays(i,n,s).primes.map(r)},alternateWaysRangeOptimized:n,fastCount:function t(i,n){return e.fast(i,n).primes.map(r)},fastCountOptimized:s,fastRange:function e(i,n){return t.fast(i,n).primes.map(r)},fastRangeOptimized:a}}

